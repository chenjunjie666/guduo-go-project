// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: bilibili_Danmaku_v1.proto

package danmaku

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//修改弹幕配置-请求
type DmPlayerConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Ts int64 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	//
	Switch *PlayerDanmakuSwitch `protobuf:"bytes,2,opt,name=switch,proto3" json:"switch,omitempty"`
	//
	SwitchSave *PlayerDanmakuSwitchSave `protobuf:"bytes,3,opt,name=switchSave,proto3" json:"switchSave,omitempty"`
	//
	UseDefaultConfig *PlayerDanmakuUseDefaultConfig `protobuf:"bytes,4,opt,name=useDefaultConfig,proto3" json:"useDefaultConfig,omitempty"`
	//
	AiRecommendedSwitch *PlayerDanmakuAiRecommendedSwitch `protobuf:"bytes,5,opt,name=aiRecommendedSwitch,proto3" json:"aiRecommendedSwitch,omitempty"`
	//
	AiRecommendedLevel *PlayerDanmakuAiRecommendedLevel `protobuf:"bytes,6,opt,name=aiRecommendedLevel,proto3" json:"aiRecommendedLevel,omitempty"`
	//
	Blocktop *PlayerDanmakuBlocktop `protobuf:"bytes,7,opt,name=blocktop,proto3" json:"blocktop,omitempty"`
	//
	Blockscroll *PlayerDanmakuBlockscroll `protobuf:"bytes,8,opt,name=blockscroll,proto3" json:"blockscroll,omitempty"`
	//
	Blockbottom *PlayerDanmakuBlockbottom `protobuf:"bytes,9,opt,name=blockbottom,proto3" json:"blockbottom,omitempty"`
	//
	Blockcolorful *PlayerDanmakuBlockcolorful `protobuf:"bytes,10,opt,name=blockcolorful,proto3" json:"blockcolorful,omitempty"`
	//
	Blockrepeat *PlayerDanmakuBlockrepeat `protobuf:"bytes,11,opt,name=blockrepeat,proto3" json:"blockrepeat,omitempty"`
	//
	Blockspecial *PlayerDanmakuBlockspecial `protobuf:"bytes,12,opt,name=blockspecial,proto3" json:"blockspecial,omitempty"`
	//
	Opacity *PlayerDanmakuOpacity `protobuf:"bytes,13,opt,name=opacity,proto3" json:"opacity,omitempty"`
	//
	Scalingfactor *PlayerDanmakuScalingfactor `protobuf:"bytes,14,opt,name=scalingfactor,proto3" json:"scalingfactor,omitempty"`
	//
	Domain *PlayerDanmakuDomain `protobuf:"bytes,15,opt,name=domain,proto3" json:"domain,omitempty"`
	//
	Speed *PlayerDanmakuSpeed `protobuf:"bytes,16,opt,name=speed,proto3" json:"speed,omitempty"`
	//
	Enableblocklist *PlayerDanmakuEnableblocklist `protobuf:"bytes,17,opt,name=enableblocklist,proto3" json:"enableblocklist,omitempty"`
	//
	InlinePlayerDanmakuSwitch *InlinePlayerDanmakuSwitch `protobuf:"bytes,18,opt,name=inlinePlayerDanmakuSwitch,proto3" json:"inlinePlayerDanmakuSwitch,omitempty"`
}

func (x *DmPlayerConfigReq) Reset() {
	*x = DmPlayerConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmPlayerConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmPlayerConfigReq) ProtoMessage() {}

func (x *DmPlayerConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmPlayerConfigReq.ProtoReflect.Descriptor instead.
func (*DmPlayerConfigReq) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{0}
}

func (x *DmPlayerConfigReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *DmPlayerConfigReq) GetSwitch() *PlayerDanmakuSwitch {
	if x != nil {
		return x.Switch
	}
	return nil
}

func (x *DmPlayerConfigReq) GetSwitchSave() *PlayerDanmakuSwitchSave {
	if x != nil {
		return x.SwitchSave
	}
	return nil
}

func (x *DmPlayerConfigReq) GetUseDefaultConfig() *PlayerDanmakuUseDefaultConfig {
	if x != nil {
		return x.UseDefaultConfig
	}
	return nil
}

func (x *DmPlayerConfigReq) GetAiRecommendedSwitch() *PlayerDanmakuAiRecommendedSwitch {
	if x != nil {
		return x.AiRecommendedSwitch
	}
	return nil
}

func (x *DmPlayerConfigReq) GetAiRecommendedLevel() *PlayerDanmakuAiRecommendedLevel {
	if x != nil {
		return x.AiRecommendedLevel
	}
	return nil
}

func (x *DmPlayerConfigReq) GetBlocktop() *PlayerDanmakuBlocktop {
	if x != nil {
		return x.Blocktop
	}
	return nil
}

func (x *DmPlayerConfigReq) GetBlockscroll() *PlayerDanmakuBlockscroll {
	if x != nil {
		return x.Blockscroll
	}
	return nil
}

func (x *DmPlayerConfigReq) GetBlockbottom() *PlayerDanmakuBlockbottom {
	if x != nil {
		return x.Blockbottom
	}
	return nil
}

func (x *DmPlayerConfigReq) GetBlockcolorful() *PlayerDanmakuBlockcolorful {
	if x != nil {
		return x.Blockcolorful
	}
	return nil
}

func (x *DmPlayerConfigReq) GetBlockrepeat() *PlayerDanmakuBlockrepeat {
	if x != nil {
		return x.Blockrepeat
	}
	return nil
}

func (x *DmPlayerConfigReq) GetBlockspecial() *PlayerDanmakuBlockspecial {
	if x != nil {
		return x.Blockspecial
	}
	return nil
}

func (x *DmPlayerConfigReq) GetOpacity() *PlayerDanmakuOpacity {
	if x != nil {
		return x.Opacity
	}
	return nil
}

func (x *DmPlayerConfigReq) GetScalingfactor() *PlayerDanmakuScalingfactor {
	if x != nil {
		return x.Scalingfactor
	}
	return nil
}

func (x *DmPlayerConfigReq) GetDomain() *PlayerDanmakuDomain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *DmPlayerConfigReq) GetSpeed() *PlayerDanmakuSpeed {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *DmPlayerConfigReq) GetEnableblocklist() *PlayerDanmakuEnableblocklist {
	if x != nil {
		return x.Enableblocklist
	}
	return nil
}

func (x *DmPlayerConfigReq) GetInlinePlayerDanmakuSwitch() *InlinePlayerDanmakuSwitch {
	if x != nil {
		return x.InlinePlayerDanmakuSwitch
	}
	return nil
}

//修改弹幕配置-回复
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//获取分段弹幕-请求
type DmSegMobileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//稿件avid/漫画epid
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	//视频cid/漫画cid
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	//弹幕类型
	//1:视频 2:漫画
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	//分段序号
	SegmentIndex int64 `protobuf:"varint,4,opt,name=segmentIndex,proto3" json:"segmentIndex,omitempty"`
	//是否青少年模式
	TeenagersMode int32 `protobuf:"varint,5,opt,name=teenagersMode,proto3" json:"teenagersMode,omitempty"`
}

func (x *DmSegMobileReq) Reset() {
	*x = DmSegMobileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmSegMobileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmSegMobileReq) ProtoMessage() {}

func (x *DmSegMobileReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmSegMobileReq.ProtoReflect.Descriptor instead.
func (*DmSegMobileReq) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{2}
}

func (x *DmSegMobileReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DmSegMobileReq) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *DmSegMobileReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DmSegMobileReq) GetSegmentIndex() int64 {
	if x != nil {
		return x.SegmentIndex
	}
	return 0
}

func (x *DmSegMobileReq) GetTeenagersMode() int32 {
	if x != nil {
		return x.TeenagersMode
	}
	return 0
}

//获取分段弹幕-回复
type DmSegMobileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//弹幕条目
	Elems []*DanmakuElem `protobuf:"bytes,1,rep,name=elems,proto3" json:"elems,omitempty"`
	//是否已关闭弹幕
	//0:未关闭 1:已关闭
	State int32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	//
	AiFlag *DanmakuAIFlag `protobuf:"bytes,3,opt,name=aiFlag,proto3" json:"aiFlag,omitempty"`
}

func (x *DmSegMobileReply) Reset() {
	*x = DmSegMobileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmSegMobileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmSegMobileReply) ProtoMessage() {}

func (x *DmSegMobileReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmSegMobileReply.ProtoReflect.Descriptor instead.
func (*DmSegMobileReply) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{3}
}

func (x *DmSegMobileReply) GetElems() []*DanmakuElem {
	if x != nil {
		return x.Elems
	}
	return nil
}

func (x *DmSegMobileReply) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *DmSegMobileReply) GetAiFlag() *DanmakuAIFlag {
	if x != nil {
		return x.AiFlag
	}
	return nil
}

//获取弹幕元数据-请求
type DmViewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//稿件avid/漫画epid
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	//视频cid/漫画cid
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	//弹幕类型
	//1:视频 2:漫画
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	//页面spm
	Spmid string `protobuf:"bytes,4,opt,name=spmid,proto3" json:"spmid,omitempty"`
	//是否冷启
	IsHardBoot int32 `protobuf:"varint,5,opt,name=isHardBoot,proto3" json:"isHardBoot,omitempty"`
}

func (x *DmViewReq) Reset() {
	*x = DmViewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmViewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmViewReq) ProtoMessage() {}

func (x *DmViewReq) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmViewReq.ProtoReflect.Descriptor instead.
func (*DmViewReq) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{4}
}

func (x *DmViewReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DmViewReq) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *DmViewReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DmViewReq) GetSpmid() string {
	if x != nil {
		return x.Spmid
	}
	return ""
}

func (x *DmViewReq) GetIsHardBoot() int32 {
	if x != nil {
		return x.IsHardBoot
	}
	return 0
}

//获取弹幕元数据-回复
type DmViewReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//是否已关闭弹幕
	//0:未关闭 1:已关闭
	Closed bool `protobuf:"varint,1,opt,name=closed,proto3" json:"closed,omitempty"`
	//智能防挡弹幕蒙版信息
	Mask *VideoMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	//视频字幕信息
	Subtitle *VideoSubtitle `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	//高级弹幕专包url
	SpecialDms []string `protobuf:"bytes,4,rep,name=specialDms,proto3" json:"specialDms,omitempty"`
	//云屏蔽配置信息
	AiFlag *DanmakuFlagConfig `protobuf:"bytes,5,opt,name=aiFlag,proto3" json:"aiFlag,omitempty"`
	//
	PlayerConfig *DanmakuPlayerViewConfig `protobuf:"bytes,6,opt,name=playerConfig,proto3" json:"playerConfig,omitempty"`
	//
	SendBoxStyle int32 `protobuf:"varint,7,opt,name=sendBoxStyle,proto3" json:"sendBoxStyle,omitempty"`
	//是否允许
	Allow bool `protobuf:"varint,8,opt,name=allow,proto3" json:"allow,omitempty"`
	//
	CheckBox string `protobuf:"bytes,9,opt,name=checkBox,proto3" json:"checkBox,omitempty"`
	//
	CheckBoxShowMsg string `protobuf:"bytes,10,opt,name=checkBoxShowMsg,proto3" json:"checkBoxShowMsg,omitempty"`
	//
	TextPlaceholder string `protobuf:"bytes,11,opt,name=textPlaceholder,proto3" json:"textPlaceholder,omitempty"`
	//弹幕输入框文案
	InputPlaceholder string `protobuf:"bytes,12,opt,name=inputPlaceholder,proto3" json:"inputPlaceholder,omitempty"`
	//
	ReportFilterContent []string `protobuf:"bytes,13,rep,name=reportFilterContent,proto3" json:"reportFilterContent,omitempty"`
}

func (x *DmViewReply) Reset() {
	*x = DmViewReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmViewReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmViewReply) ProtoMessage() {}

func (x *DmViewReply) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmViewReply.ProtoReflect.Descriptor instead.
func (*DmViewReply) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{5}
}

func (x *DmViewReply) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *DmViewReply) GetMask() *VideoMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *DmViewReply) GetSubtitle() *VideoSubtitle {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *DmViewReply) GetSpecialDms() []string {
	if x != nil {
		return x.SpecialDms
	}
	return nil
}

func (x *DmViewReply) GetAiFlag() *DanmakuFlagConfig {
	if x != nil {
		return x.AiFlag
	}
	return nil
}

func (x *DmViewReply) GetPlayerConfig() *DanmakuPlayerViewConfig {
	if x != nil {
		return x.PlayerConfig
	}
	return nil
}

func (x *DmViewReply) GetSendBoxStyle() int32 {
	if x != nil {
		return x.SendBoxStyle
	}
	return 0
}

func (x *DmViewReply) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

func (x *DmViewReply) GetCheckBox() string {
	if x != nil {
		return x.CheckBox
	}
	return ""
}

func (x *DmViewReply) GetCheckBoxShowMsg() string {
	if x != nil {
		return x.CheckBoxShowMsg
	}
	return ""
}

func (x *DmViewReply) GetTextPlaceholder() string {
	if x != nil {
		return x.TextPlaceholder
	}
	return ""
}

func (x *DmViewReply) GetInputPlaceholder() string {
	if x != nil {
		return x.InputPlaceholder
	}
	return ""
}

func (x *DmViewReply) GetReportFilterContent() []string {
	if x != nil {
		return x.ReportFilterContent
	}
	return nil
}

//
type DanmakuAIFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	DmFlags []*DanmakuFlag `protobuf:"bytes,1,rep,name=dmFlags,proto3" json:"dmFlags,omitempty"`
}

func (x *DanmakuAIFlag) Reset() {
	*x = DanmakuAIFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuAIFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuAIFlag) ProtoMessage() {}

func (x *DanmakuAIFlag) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuAIFlag.ProtoReflect.Descriptor instead.
func (*DanmakuAIFlag) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{6}
}

func (x *DanmakuAIFlag) GetDmFlags() []*DanmakuFlag {
	if x != nil {
		return x.DmFlags
	}
	return nil
}

//弹幕条目
type DanmakuElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//弹幕dmid
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//弹幕出现位置
	Progress int32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	//弹幕类型
	Mode int32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	//弹幕字号
	Fontsize int32 `protobuf:"varint,4,opt,name=fontsize,proto3" json:"fontsize,omitempty"`
	//弹幕颜色
	Color uint32 `protobuf:"varint,5,opt,name=color,proto3" json:"color,omitempty"`
	//发送着UID hash
	MidHash string `protobuf:"bytes,6,opt,name=midHash,proto3" json:"midHash,omitempty"`
	//弹幕正文
	Content string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	//发送时间
	Ctime int64 `protobuf:"varint,8,opt,name=ctime,proto3" json:"ctime,omitempty"`
	//权重
	Weight int32 `protobuf:"varint,9,opt,name=weight,proto3" json:"weight,omitempty"`
	//动作
	Action string `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
	//弹幕池
	Pool int32 `protobuf:"varint,11,opt,name=pool,proto3" json:"pool,omitempty"`
	//弹幕dmid-str
	IdStr string `protobuf:"bytes,12,opt,name=idStr,proto3" json:"idStr,omitempty"`
	//弹幕属性
	//0:正常 4:高赞 16:?
	Attr int32 `protobuf:"varint,13,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *DanmakuElem) Reset() {
	*x = DanmakuElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuElem) ProtoMessage() {}

func (x *DanmakuElem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuElem.ProtoReflect.Descriptor instead.
func (*DanmakuElem) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{7}
}

func (x *DanmakuElem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DanmakuElem) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DanmakuElem) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *DanmakuElem) GetFontsize() int32 {
	if x != nil {
		return x.Fontsize
	}
	return 0
}

func (x *DanmakuElem) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *DanmakuElem) GetMidHash() string {
	if x != nil {
		return x.MidHash
	}
	return ""
}

func (x *DanmakuElem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DanmakuElem) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *DanmakuElem) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *DanmakuElem) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *DanmakuElem) GetPool() int32 {
	if x != nil {
		return x.Pool
	}
	return 0
}

func (x *DanmakuElem) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *DanmakuElem) GetAttr() int32 {
	if x != nil {
		return x.Attr
	}
	return 0
}

//
type DanmakuFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Dmid int64 `protobuf:"varint,1,opt,name=dmid,proto3" json:"dmid,omitempty"`
	//
	Flag uint32 `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *DanmakuFlag) Reset() {
	*x = DanmakuFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuFlag) ProtoMessage() {}

func (x *DanmakuFlag) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuFlag.ProtoReflect.Descriptor instead.
func (*DanmakuFlag) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{8}
}

func (x *DanmakuFlag) GetDmid() int64 {
	if x != nil {
		return x.Dmid
	}
	return 0
}

func (x *DanmakuFlag) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

//云屏蔽配置信息
type DanmakuFlagConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//云屏蔽等级
	RecFlag int32 `protobuf:"varint,1,opt,name=recFlag,proto3" json:"recFlag,omitempty"`
	//云屏蔽文案
	RecText string `protobuf:"bytes,2,opt,name=recText,proto3" json:"recText,omitempty"`
	//云屏蔽开关
	RecSwitch int32 `protobuf:"varint,3,opt,name=recSwitch,proto3" json:"recSwitch,omitempty"`
}

func (x *DanmakuFlagConfig) Reset() {
	*x = DanmakuFlagConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuFlagConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuFlagConfig) ProtoMessage() {}

func (x *DanmakuFlagConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuFlagConfig.ProtoReflect.Descriptor instead.
func (*DanmakuFlagConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{9}
}

func (x *DanmakuFlagConfig) GetRecFlag() int32 {
	if x != nil {
		return x.RecFlag
	}
	return 0
}

func (x *DanmakuFlagConfig) GetRecText() string {
	if x != nil {
		return x.RecText
	}
	return ""
}

func (x *DanmakuFlagConfig) GetRecSwitch() int32 {
	if x != nil {
		return x.RecSwitch
	}
	return 0
}

//
type DanmakuDefaultPlayerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	PlayerDanmakuUseDefaultConfig bool `protobuf:"varint,1,opt,name=playerDanmakuUseDefaultConfig,proto3" json:"playerDanmakuUseDefaultConfig,omitempty"`
	//
	PlayerDanmakuAiRecommendedSwitch bool `protobuf:"varint,4,opt,name=playerDanmakuAiRecommendedSwitch,proto3" json:"playerDanmakuAiRecommendedSwitch,omitempty"`
	//
	PlayerDanmakuAiRecommendedLevel int32 `protobuf:"varint,5,opt,name=playerDanmakuAiRecommendedLevel,proto3" json:"playerDanmakuAiRecommendedLevel,omitempty"`
	//
	PlayerDanmakuBlocktop bool `protobuf:"varint,6,opt,name=playerDanmakuBlocktop,proto3" json:"playerDanmakuBlocktop,omitempty"`
	//
	PlayerDanmakuBlockscroll bool `protobuf:"varint,7,opt,name=playerDanmakuBlockscroll,proto3" json:"playerDanmakuBlockscroll,omitempty"`
	//
	PlayerDanmakuBlockbottom bool `protobuf:"varint,8,opt,name=playerDanmakuBlockbottom,proto3" json:"playerDanmakuBlockbottom,omitempty"`
	//
	PlayerDanmakuBlockcolorful bool `protobuf:"varint,9,opt,name=playerDanmakuBlockcolorful,proto3" json:"playerDanmakuBlockcolorful,omitempty"`
	//
	PlayerDanmakuBlockrepeat bool `protobuf:"varint,10,opt,name=playerDanmakuBlockrepeat,proto3" json:"playerDanmakuBlockrepeat,omitempty"`
	//
	PlayerDanmakuBlockspecial bool `protobuf:"varint,11,opt,name=playerDanmakuBlockspecial,proto3" json:"playerDanmakuBlockspecial,omitempty"`
	//
	PlayerDanmakuOpacity float64 `protobuf:"fixed32,12,opt,name=playerDanmakuOpacity,proto3" json:"playerDanmakuOpacity,omitempty"`
	//
	PlayerDanmakuScalingfactor float64 `protobuf:"fixed32,13,opt,name=playerDanmakuScalingfactor,proto3" json:"playerDanmakuScalingfactor,omitempty"`
	//
	PlayerDanmakuDomain float64 `protobuf:"fixed32,14,opt,name=playerDanmakuDomain,proto3" json:"playerDanmakuDomain,omitempty"`
	//
	PlayerDanmakuSpeed int32 `protobuf:"varint,15,opt,name=playerDanmakuSpeed,proto3" json:"playerDanmakuSpeed,omitempty"`
	//
	InlinePlayerDanmakuSwitch bool `protobuf:"varint,16,opt,name=inlinePlayerDanmakuSwitch,proto3" json:"inlinePlayerDanmakuSwitch,omitempty"`
}

func (x *DanmakuDefaultPlayerConfig) Reset() {
	*x = DanmakuDefaultPlayerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuDefaultPlayerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuDefaultPlayerConfig) ProtoMessage() {}

func (x *DanmakuDefaultPlayerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuDefaultPlayerConfig.ProtoReflect.Descriptor instead.
func (*DanmakuDefaultPlayerConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{10}
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuUseDefaultConfig() bool {
	if x != nil {
		return x.PlayerDanmakuUseDefaultConfig
	}
	return false
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuAiRecommendedSwitch() bool {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedSwitch
	}
	return false
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuAiRecommendedLevel() int32 {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedLevel
	}
	return 0
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuBlocktop() bool {
	if x != nil {
		return x.PlayerDanmakuBlocktop
	}
	return false
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuBlockscroll() bool {
	if x != nil {
		return x.PlayerDanmakuBlockscroll
	}
	return false
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuBlockbottom() bool {
	if x != nil {
		return x.PlayerDanmakuBlockbottom
	}
	return false
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuBlockcolorful() bool {
	if x != nil {
		return x.PlayerDanmakuBlockcolorful
	}
	return false
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuBlockrepeat() bool {
	if x != nil {
		return x.PlayerDanmakuBlockrepeat
	}
	return false
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuBlockspecial() bool {
	if x != nil {
		return x.PlayerDanmakuBlockspecial
	}
	return false
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuOpacity() float64 {
	if x != nil {
		return x.PlayerDanmakuOpacity
	}
	return 0
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuScalingfactor() float64 {
	if x != nil {
		return x.PlayerDanmakuScalingfactor
	}
	return 0
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuDomain() float64 {
	if x != nil {
		return x.PlayerDanmakuDomain
	}
	return 0
}

func (x *DanmakuDefaultPlayerConfig) GetPlayerDanmakuSpeed() int32 {
	if x != nil {
		return x.PlayerDanmakuSpeed
	}
	return 0
}

func (x *DanmakuDefaultPlayerConfig) GetInlinePlayerDanmakuSwitch() bool {
	if x != nil {
		return x.InlinePlayerDanmakuSwitch
	}
	return false
}

//
type DanmakuPlayerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	PlayerDanmakuSwitch bool `protobuf:"varint,1,opt,name=playerDanmakuSwitch,proto3" json:"playerDanmakuSwitch,omitempty"`
	//
	PlayerDanmakuSwitchSave bool `protobuf:"varint,2,opt,name=playerDanmakuSwitchSave,proto3" json:"playerDanmakuSwitchSave,omitempty"`
	//
	PlayerDanmakuUseDefaultConfig bool `protobuf:"varint,3,opt,name=playerDanmakuUseDefaultConfig,proto3" json:"playerDanmakuUseDefaultConfig,omitempty"`
	//
	PlayerDanmakuAiRecommendedSwitch bool `protobuf:"varint,4,opt,name=playerDanmakuAiRecommendedSwitch,proto3" json:"playerDanmakuAiRecommendedSwitch,omitempty"`
	//
	PlayerDanmakuAiRecommendedLevel int32 `protobuf:"varint,5,opt,name=playerDanmakuAiRecommendedLevel,proto3" json:"playerDanmakuAiRecommendedLevel,omitempty"`
	//
	PlayerDanmakuBlocktop bool `protobuf:"varint,6,opt,name=playerDanmakuBlocktop,proto3" json:"playerDanmakuBlocktop,omitempty"`
	//
	PlayerDanmakuBlockscroll bool `protobuf:"varint,7,opt,name=playerDanmakuBlockscroll,proto3" json:"playerDanmakuBlockscroll,omitempty"`
	//
	PlayerDanmakuBlockbottom bool `protobuf:"varint,8,opt,name=playerDanmakuBlockbottom,proto3" json:"playerDanmakuBlockbottom,omitempty"`
	//
	PlayerDanmakuBlockcolorful bool `protobuf:"varint,9,opt,name=playerDanmakuBlockcolorful,proto3" json:"playerDanmakuBlockcolorful,omitempty"`
	//
	PlayerDanmakuBlockrepeat bool `protobuf:"varint,10,opt,name=playerDanmakuBlockrepeat,proto3" json:"playerDanmakuBlockrepeat,omitempty"`
	//
	PlayerDanmakuBlockspecial bool `protobuf:"varint,11,opt,name=playerDanmakuBlockspecial,proto3" json:"playerDanmakuBlockspecial,omitempty"`
	//
	PlayerDanmakuOpacity float64 `protobuf:"fixed32,12,opt,name=playerDanmakuOpacity,proto3" json:"playerDanmakuOpacity,omitempty"`
	//
	PlayerDanmakuScalingfactor float64 `protobuf:"fixed32,13,opt,name=playerDanmakuScalingfactor,proto3" json:"playerDanmakuScalingfactor,omitempty"`
	//
	PlayerDanmakuDomain float64 `protobuf:"fixed32,14,opt,name=playerDanmakuDomain,proto3" json:"playerDanmakuDomain,omitempty"`
	//
	PlayerDanmakuSpeed int32 `protobuf:"varint,15,opt,name=playerDanmakuSpeed,proto3" json:"playerDanmakuSpeed,omitempty"`
	//
	PlayerDanmakuEnableblocklist bool `protobuf:"varint,16,opt,name=playerDanmakuEnableblocklist,proto3" json:"playerDanmakuEnableblocklist,omitempty"`
	//
	InlinePlayerDanmakuSwitch bool `protobuf:"varint,17,opt,name=inlinePlayerDanmakuSwitch,proto3" json:"inlinePlayerDanmakuSwitch,omitempty"`
	//
	InlinePlayerDanmakuConfig int32 `protobuf:"varint,18,opt,name=inlinePlayerDanmakuConfig,proto3" json:"inlinePlayerDanmakuConfig,omitempty"`
}

func (x *DanmakuPlayerConfig) Reset() {
	*x = DanmakuPlayerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuPlayerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuPlayerConfig) ProtoMessage() {}

func (x *DanmakuPlayerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuPlayerConfig.ProtoReflect.Descriptor instead.
func (*DanmakuPlayerConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{11}
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuSwitch() bool {
	if x != nil {
		return x.PlayerDanmakuSwitch
	}
	return false
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuSwitchSave() bool {
	if x != nil {
		return x.PlayerDanmakuSwitchSave
	}
	return false
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuUseDefaultConfig() bool {
	if x != nil {
		return x.PlayerDanmakuUseDefaultConfig
	}
	return false
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuAiRecommendedSwitch() bool {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedSwitch
	}
	return false
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuAiRecommendedLevel() int32 {
	if x != nil {
		return x.PlayerDanmakuAiRecommendedLevel
	}
	return 0
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuBlocktop() bool {
	if x != nil {
		return x.PlayerDanmakuBlocktop
	}
	return false
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuBlockscroll() bool {
	if x != nil {
		return x.PlayerDanmakuBlockscroll
	}
	return false
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuBlockbottom() bool {
	if x != nil {
		return x.PlayerDanmakuBlockbottom
	}
	return false
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuBlockcolorful() bool {
	if x != nil {
		return x.PlayerDanmakuBlockcolorful
	}
	return false
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuBlockrepeat() bool {
	if x != nil {
		return x.PlayerDanmakuBlockrepeat
	}
	return false
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuBlockspecial() bool {
	if x != nil {
		return x.PlayerDanmakuBlockspecial
	}
	return false
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuOpacity() float64 {
	if x != nil {
		return x.PlayerDanmakuOpacity
	}
	return 0
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuScalingfactor() float64 {
	if x != nil {
		return x.PlayerDanmakuScalingfactor
	}
	return 0
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuDomain() float64 {
	if x != nil {
		return x.PlayerDanmakuDomain
	}
	return 0
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuSpeed() int32 {
	if x != nil {
		return x.PlayerDanmakuSpeed
	}
	return 0
}

func (x *DanmakuPlayerConfig) GetPlayerDanmakuEnableblocklist() bool {
	if x != nil {
		return x.PlayerDanmakuEnableblocklist
	}
	return false
}

func (x *DanmakuPlayerConfig) GetInlinePlayerDanmakuSwitch() bool {
	if x != nil {
		return x.InlinePlayerDanmakuSwitch
	}
	return false
}

func (x *DanmakuPlayerConfig) GetInlinePlayerDanmakuConfig() int32 {
	if x != nil {
		return x.InlinePlayerDanmakuConfig
	}
	return 0
}

//
type DanmakuPlayerDynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Progress int32 `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"`
	//
	PlayerDanmakuDomain float64 `protobuf:"fixed32,2,opt,name=playerDanmakuDomain,proto3" json:"playerDanmakuDomain,omitempty"`
}

func (x *DanmakuPlayerDynamicConfig) Reset() {
	*x = DanmakuPlayerDynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuPlayerDynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuPlayerDynamicConfig) ProtoMessage() {}

func (x *DanmakuPlayerDynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuPlayerDynamicConfig.ProtoReflect.Descriptor instead.
func (*DanmakuPlayerDynamicConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{12}
}

func (x *DanmakuPlayerDynamicConfig) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DanmakuPlayerDynamicConfig) GetPlayerDanmakuDomain() float64 {
	if x != nil {
		return x.PlayerDanmakuDomain
	}
	return 0
}

//
type DanmakuPlayerViewConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	DanmakukuDefaultPlayerConfig *DanmakuDefaultPlayerConfig `protobuf:"bytes,1,opt,name=danmakukuDefaultPlayerConfig,proto3" json:"danmakukuDefaultPlayerConfig,omitempty"`
	//
	DanmakukuPlayerConfig *DanmakuPlayerConfig `protobuf:"bytes,2,opt,name=danmakukuPlayerConfig,proto3" json:"danmakukuPlayerConfig,omitempty"`
	//
	DanmakukuPlayerDynamicConfig []*DanmakuPlayerDynamicConfig `protobuf:"bytes,3,rep,name=danmakukuPlayerDynamicConfig,proto3" json:"danmakukuPlayerDynamicConfig,omitempty"`
}

func (x *DanmakuPlayerViewConfig) Reset() {
	*x = DanmakuPlayerViewConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmakuPlayerViewConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmakuPlayerViewConfig) ProtoMessage() {}

func (x *DanmakuPlayerViewConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmakuPlayerViewConfig.ProtoReflect.Descriptor instead.
func (*DanmakuPlayerViewConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{13}
}

func (x *DanmakuPlayerViewConfig) GetDanmakukuDefaultPlayerConfig() *DanmakuDefaultPlayerConfig {
	if x != nil {
		return x.DanmakukuDefaultPlayerConfig
	}
	return nil
}

func (x *DanmakuPlayerViewConfig) GetDanmakukuPlayerConfig() *DanmakuPlayerConfig {
	if x != nil {
		return x.DanmakukuPlayerConfig
	}
	return nil
}

func (x *DanmakuPlayerViewConfig) GetDanmakukuPlayerDynamicConfig() []*DanmakuPlayerDynamicConfig {
	if x != nil {
		return x.DanmakukuPlayerDynamicConfig
	}
	return nil
}

//
type InlinePlayerDanmakuSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InlinePlayerDanmakuSwitch) Reset() {
	*x = InlinePlayerDanmakuSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlinePlayerDanmakuSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlinePlayerDanmakuSwitch) ProtoMessage() {}

func (x *InlinePlayerDanmakuSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlinePlayerDanmakuSwitch.ProtoReflect.Descriptor instead.
func (*InlinePlayerDanmakuSwitch) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{14}
}

func (x *InlinePlayerDanmakuSwitch) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
type PlayerDanmakuAiRecommendedLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuAiRecommendedLevel) Reset() {
	*x = PlayerDanmakuAiRecommendedLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuAiRecommendedLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuAiRecommendedLevel) ProtoMessage() {}

func (x *PlayerDanmakuAiRecommendedLevel) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuAiRecommendedLevel.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuAiRecommendedLevel) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{15}
}

func (x *PlayerDanmakuAiRecommendedLevel) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
type PlayerDanmakuAiRecommendedSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuAiRecommendedSwitch) Reset() {
	*x = PlayerDanmakuAiRecommendedSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuAiRecommendedSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuAiRecommendedSwitch) ProtoMessage() {}

func (x *PlayerDanmakuAiRecommendedSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuAiRecommendedSwitch.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuAiRecommendedSwitch) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{16}
}

func (x *PlayerDanmakuAiRecommendedSwitch) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
type PlayerDanmakuBlockbottom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuBlockbottom) Reset() {
	*x = PlayerDanmakuBlockbottom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuBlockbottom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuBlockbottom) ProtoMessage() {}

func (x *PlayerDanmakuBlockbottom) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuBlockbottom.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuBlockbottom) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{17}
}

func (x *PlayerDanmakuBlockbottom) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
type PlayerDanmakuBlockcolorful struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuBlockcolorful) Reset() {
	*x = PlayerDanmakuBlockcolorful{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuBlockcolorful) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuBlockcolorful) ProtoMessage() {}

func (x *PlayerDanmakuBlockcolorful) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuBlockcolorful.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuBlockcolorful) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{18}
}

func (x *PlayerDanmakuBlockcolorful) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
type PlayerDanmakuBlockrepeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuBlockrepeat) Reset() {
	*x = PlayerDanmakuBlockrepeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuBlockrepeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuBlockrepeat) ProtoMessage() {}

func (x *PlayerDanmakuBlockrepeat) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuBlockrepeat.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuBlockrepeat) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{19}
}

func (x *PlayerDanmakuBlockrepeat) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
type PlayerDanmakuBlockscroll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuBlockscroll) Reset() {
	*x = PlayerDanmakuBlockscroll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuBlockscroll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuBlockscroll) ProtoMessage() {}

func (x *PlayerDanmakuBlockscroll) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuBlockscroll.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuBlockscroll) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{20}
}

func (x *PlayerDanmakuBlockscroll) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
type PlayerDanmakuBlockspecial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuBlockspecial) Reset() {
	*x = PlayerDanmakuBlockspecial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuBlockspecial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuBlockspecial) ProtoMessage() {}

func (x *PlayerDanmakuBlockspecial) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuBlockspecial.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuBlockspecial) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{21}
}

func (x *PlayerDanmakuBlockspecial) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
type PlayerDanmakuBlocktop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuBlocktop) Reset() {
	*x = PlayerDanmakuBlocktop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuBlocktop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuBlocktop) ProtoMessage() {}

func (x *PlayerDanmakuBlocktop) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuBlocktop.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuBlocktop) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{22}
}

func (x *PlayerDanmakuBlocktop) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
type PlayerDanmakuDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value float64 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuDomain) Reset() {
	*x = PlayerDanmakuDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuDomain) ProtoMessage() {}

func (x *PlayerDanmakuDomain) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuDomain.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuDomain) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{23}
}

func (x *PlayerDanmakuDomain) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

//
type PlayerDanmakuEnableblocklist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuEnableblocklist) Reset() {
	*x = PlayerDanmakuEnableblocklist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuEnableblocklist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuEnableblocklist) ProtoMessage() {}

func (x *PlayerDanmakuEnableblocklist) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuEnableblocklist.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuEnableblocklist) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{24}
}

func (x *PlayerDanmakuEnableblocklist) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
type PlayerDanmakuOpacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value float64 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuOpacity) Reset() {
	*x = PlayerDanmakuOpacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuOpacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuOpacity) ProtoMessage() {}

func (x *PlayerDanmakuOpacity) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuOpacity.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuOpacity) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{25}
}

func (x *PlayerDanmakuOpacity) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

//
type PlayerDanmakuScalingfactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value float64 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuScalingfactor) Reset() {
	*x = PlayerDanmakuScalingfactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuScalingfactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuScalingfactor) ProtoMessage() {}

func (x *PlayerDanmakuScalingfactor) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuScalingfactor.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuScalingfactor) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{26}
}

func (x *PlayerDanmakuScalingfactor) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

//
type PlayerDanmakuSpeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuSpeed) Reset() {
	*x = PlayerDanmakuSpeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuSpeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuSpeed) ProtoMessage() {}

func (x *PlayerDanmakuSpeed) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuSpeed.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuSpeed) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{27}
}

func (x *PlayerDanmakuSpeed) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

//
type PlayerDanmakuSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuSwitch) Reset() {
	*x = PlayerDanmakuSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuSwitch) ProtoMessage() {}

func (x *PlayerDanmakuSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuSwitch.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuSwitch) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{28}
}

func (x *PlayerDanmakuSwitch) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
type PlayerDanmakuSwitchSave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuSwitchSave) Reset() {
	*x = PlayerDanmakuSwitchSave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuSwitchSave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuSwitchSave) ProtoMessage() {}

func (x *PlayerDanmakuSwitchSave) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuSwitchSave.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuSwitchSave) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{29}
}

func (x *PlayerDanmakuSwitchSave) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//
type PlayerDanmakuUseDefaultConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlayerDanmakuUseDefaultConfig) Reset() {
	*x = PlayerDanmakuUseDefaultConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDanmakuUseDefaultConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDanmakuUseDefaultConfig) ProtoMessage() {}

func (x *PlayerDanmakuUseDefaultConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDanmakuUseDefaultConfig.ProtoReflect.Descriptor instead.
func (*PlayerDanmakuUseDefaultConfig) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{30}
}

func (x *PlayerDanmakuUseDefaultConfig) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//单个字幕信息
type SubtitleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//字幕id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//字幕id-str
	IdStr string `protobuf:"bytes,2,opt,name=idStr,proto3" json:"idStr,omitempty"`
	//字幕语言代码
	Lan string `protobuf:"bytes,3,opt,name=lan,proto3" json:"lan,omitempty"`
	//字幕语言
	LanDoc string `protobuf:"bytes,4,opt,name=lanDoc,proto3" json:"lanDoc,omitempty"`
	//字幕文件url
	SubtitleUrl string `protobuf:"bytes,5,opt,name=subtitleUrl,proto3" json:"subtitleUrl,omitempty"`
	//字幕作者信息
	Author *UserInfo `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *SubtitleItem) Reset() {
	*x = SubtitleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtitleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtitleItem) ProtoMessage() {}

func (x *SubtitleItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtitleItem.ProtoReflect.Descriptor instead.
func (*SubtitleItem) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{31}
}

func (x *SubtitleItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubtitleItem) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *SubtitleItem) GetLan() string {
	if x != nil {
		return x.Lan
	}
	return ""
}

func (x *SubtitleItem) GetLanDoc() string {
	if x != nil {
		return x.LanDoc
	}
	return ""
}

func (x *SubtitleItem) GetSubtitleUrl() string {
	if x != nil {
		return x.SubtitleUrl
	}
	return ""
}

func (x *SubtitleItem) GetAuthor() *UserInfo {
	if x != nil {
		return x.Author
	}
	return nil
}

//字幕作者信息
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//作者uid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	//作者昵称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//作者性别
	Sex string `protobuf:"bytes,3,opt,name=sex,proto3" json:"sex,omitempty"`
	//作者头像url
	Face string `protobuf:"bytes,4,opt,name=face,proto3" json:"face,omitempty"`
	//作者个人签名
	Sign string `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
	//
	Rank int32 `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{32}
}

func (x *UserInfo) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *UserInfo) GetFace() string {
	if x != nil {
		return x.Face
	}
	return ""
}

func (x *UserInfo) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *UserInfo) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

//智能防挡弹幕蒙版信息
type VideoMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//视频cid
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	//平台
	//0:web端 1:app端
	Plat int32 `protobuf:"varint,2,opt,name=plat,proto3" json:"plat,omitempty"`
	//帧率
	Fps int32 `protobuf:"varint,3,opt,name=fps,proto3" json:"fps,omitempty"`
	//间隔时间
	Time int64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	//蒙版url
	MaskUrl string `protobuf:"bytes,5,opt,name=maskUrl,proto3" json:"maskUrl,omitempty"`
}

func (x *VideoMask) Reset() {
	*x = VideoMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMask) ProtoMessage() {}

func (x *VideoMask) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMask.ProtoReflect.Descriptor instead.
func (*VideoMask) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{33}
}

func (x *VideoMask) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *VideoMask) GetPlat() int32 {
	if x != nil {
		return x.Plat
	}
	return 0
}

func (x *VideoMask) GetFps() int32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *VideoMask) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *VideoMask) GetMaskUrl() string {
	if x != nil {
		return x.MaskUrl
	}
	return ""
}

//视频字幕信息
type VideoSubtitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//视频原语言代码
	Lan string `protobuf:"bytes,1,opt,name=lan,proto3" json:"lan,omitempty"`
	//视频原语言
	LanDoc string `protobuf:"bytes,2,opt,name=lanDoc,proto3" json:"lanDoc,omitempty"`
	//视频字幕列表
	Subtitles []*SubtitleItem `protobuf:"bytes,3,rep,name=subtitles,proto3" json:"subtitles,omitempty"`
}

func (x *VideoSubtitle) Reset() {
	*x = VideoSubtitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_danmaku_v1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSubtitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSubtitle) ProtoMessage() {}

func (x *VideoSubtitle) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_danmaku_v1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSubtitle.ProtoReflect.Descriptor instead.
func (*VideoSubtitle) Descriptor() ([]byte, []int) {
	return file_bilibili_danmaku_v1_proto_rawDescGZIP(), []int{34}
}

func (x *VideoSubtitle) GetLan() string {
	if x != nil {
		return x.Lan
	}
	return ""
}

func (x *VideoSubtitle) GetLanDoc() string {
	if x != nil {
		return x.LanDoc
	}
	return ""
}

func (x *VideoSubtitle) GetSubtitles() []*SubtitleItem {
	if x != nil {
		return x.Subtitles
	}
	return nil
}

var File_bilibili_danmaku_v1_proto protoreflect.FileDescriptor

var file_bilibili_danmaku_v1_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x5f, 0x64, 0x61, 0x6e, 0x6d, 0x75,
	0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x08, 0x0a, 0x11, 0x44, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a,
	0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x61, 0x76, 0x65, 0x52, 0x0a, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x61, 0x76, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x10, 0x75, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x13, 0x61, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x13, 0x61, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x50, 0x0a, 0x12, 0x61, 0x69, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x12, 0x61, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x74, 0x6f, 0x70, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x3b,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x41, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x52, 0x0d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x58,
	0x0a, 0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x19, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x22, 0x38, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x65, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x65, 0x65, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a, 0x10, 0x44, 0x6d, 0x53, 0x65, 0x67,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x65,
	0x6c, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x05, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41,
	0x49, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x06, 0x61, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x79, 0x0a,
	0x09, 0x44, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x70, 0x6d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x48, 0x61,
	0x72, 0x64, 0x42, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73,
	0x48, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x6f, 0x74, 0x22, 0x81, 0x04, 0x0a, 0x0b, 0x44, 0x6d, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b,
	0x12, 0x2a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x06,
	0x61, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x61, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x53, 0x68, 0x6f,
	0x77, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x65, 0x78, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x0d,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x49, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a,
	0x07, 0x64, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x07, 0x64, 0x6d,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x0b, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22,
	0x35, 0x0a, 0x0b, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x6d,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x65, 0x0a, 0x11, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x63, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x22, 0xf2, 0x06,
	0x0a, 0x18, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x1d, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x55, 0x73, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x4a, 0x0a, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x48, 0x0a, 0x1f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x3a, 0x0a, 0x18,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66,
	0x75, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x66, 0x75, 0x6c, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x12, 0x3c, 0x0a, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x32,
	0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x4f,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x4f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x22, 0xd9, 0x08, 0x0a, 0x11, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x53, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x61, 0x76, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x20, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x48, 0x0a, 0x1f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x34, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x3e,
	0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x12, 0x3a,
	0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x1a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x42,
	0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d,
	0x61, 0x6b, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x68,
	0x0a, 0x18, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x93, 0x02, 0x0a, 0x15, 0x44, 0x61, 0x6e,
	0x6d, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x59, 0x0a, 0x1a, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x1a, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a,
	0x13, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x61, 0x6e,
	0x6d, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13,
	0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x1a, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x1a, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x6b, 0x75, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x31,
	0x0a, 0x19, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x37, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x20, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x41, 0x69, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x66, 0x75, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x18, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x18,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31,
	0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x2d, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x2b, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b,
	0x75, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a,
	0x1c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e,
	0x6d, 0x61, 0x6b, 0x75, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x32, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x2b, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61,
	0x6b, 0x75, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f,
	0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x61, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x35, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x61, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x7e, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x71, 0x0a, 0x09,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x70,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x55, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x55, 0x72, 0x6c, 0x22,
	0x66, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c,
	0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x32, 0x8c, 0x01, 0x0a, 0x02, 0x44, 0x4d, 0x12, 0x2f,
	0x0a, 0x0e, 0x44, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x2e, 0x44, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x0b, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x0f,
	0x2e, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x44, 0x6d, 0x53, 0x65, 0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x44, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0a, 0x2e, 0x44,
	0x6d, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x44, 0x6d, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bilibili_danmaku_v1_proto_rawDescOnce sync.Once
	file_bilibili_danmaku_v1_proto_rawDescData = file_bilibili_danmaku_v1_proto_rawDesc
)

func file_bilibili_danmaku_v1_proto_rawDescGZIP() []byte {
	file_bilibili_danmaku_v1_proto_rawDescOnce.Do(func() {
		file_bilibili_danmaku_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_bilibili_danmaku_v1_proto_rawDescData)
	})
	return file_bilibili_danmaku_v1_proto_rawDescData
}

var file_bilibili_danmaku_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_bilibili_danmaku_v1_proto_goTypes = []interface{}{
	(*DmPlayerConfigReq)(nil),                // 0: DmPlayerConfigReq
	(*Response)(nil),                         // 1: Response
	(*DmSegMobileReq)(nil),                   // 2: DmSegMobileReq
	(*DmSegMobileReply)(nil),                 // 3: DmSegMobileReply
	(*DmViewReq)(nil),                        // 4: DmViewReq
	(*DmViewReply)(nil),                      // 5: DmViewReply
	(*DanmakuAIFlag)(nil),                    // 6: DanmakuAIFlag
	(*DanmakuElem)(nil),                      // 7: DanmakuElem
	(*DanmakuFlag)(nil),                      // 8: DanmakuFlag
	(*DanmakuFlagConfig)(nil),                // 9: DanmakuFlagConfig
	(*DanmakuDefaultPlayerConfig)(nil),       // 10: DanmakuDefaultPlayerConfig
	(*DanmakuPlayerConfig)(nil),              // 11: DanmakuPlayerConfig
	(*DanmakuPlayerDynamicConfig)(nil),       // 12: DanmakuPlayerDynamicConfig
	(*DanmakuPlayerViewConfig)(nil),          // 13: DanmakuPlayerViewConfig
	(*InlinePlayerDanmakuSwitch)(nil),        // 14: InlinePlayerDanmakuSwitch
	(*PlayerDanmakuAiRecommendedLevel)(nil),  // 15: PlayerDanmakuAiRecommendedLevel
	(*PlayerDanmakuAiRecommendedSwitch)(nil), // 16: PlayerDanmakuAiRecommendedSwitch
	(*PlayerDanmakuBlockbottom)(nil),         // 17: PlayerDanmakuBlockbottom
	(*PlayerDanmakuBlockcolorful)(nil),       // 18: PlayerDanmakuBlockcolorful
	(*PlayerDanmakuBlockrepeat)(nil),         // 19: PlayerDanmakuBlockrepeat
	(*PlayerDanmakuBlockscroll)(nil),         // 20: PlayerDanmakuBlockscroll
	(*PlayerDanmakuBlockspecial)(nil),        // 21: PlayerDanmakuBlockspecial
	(*PlayerDanmakuBlocktop)(nil),            // 22: PlayerDanmakuBlocktop
	(*PlayerDanmakuDomain)(nil),              // 23: PlayerDanmakuDomain
	(*PlayerDanmakuEnableblocklist)(nil),     // 24: PlayerDanmakuEnableblocklist
	(*PlayerDanmakuOpacity)(nil),             // 25: PlayerDanmakuOpacity
	(*PlayerDanmakuScalingfactor)(nil),       // 26: PlayerDanmakuScalingfactor
	(*PlayerDanmakuSpeed)(nil),               // 27: PlayerDanmakuSpeed
	(*PlayerDanmakuSwitch)(nil),              // 28: PlayerDanmakuSwitch
	(*PlayerDanmakuSwitchSave)(nil),          // 29: PlayerDanmakuSwitchSave
	(*PlayerDanmakuUseDefaultConfig)(nil),    // 30: PlayerDanmakuUseDefaultConfig
	(*SubtitleItem)(nil),                     // 31: SubtitleItem
	(*UserInfo)(nil),                         // 32: UserInfo
	(*VideoMask)(nil),                        // 33: VideoMask
	(*VideoSubtitle)(nil),                    // 34: VideoSubtitle
}
var file_bilibili_danmaku_v1_proto_depIdxs = []int32{
	28, // 0: DmPlayerConfigReq.switch:type_name -> PlayerDanmakuSwitch
	29, // 1: DmPlayerConfigReq.switchSave:type_name -> PlayerDanmakuSwitchSave
	30, // 2: DmPlayerConfigReq.useDefaultConfig:type_name -> PlayerDanmakuUseDefaultConfig
	16, // 3: DmPlayerConfigReq.aiRecommendedSwitch:type_name -> PlayerDanmakuAiRecommendedSwitch
	15, // 4: DmPlayerConfigReq.aiRecommendedLevel:type_name -> PlayerDanmakuAiRecommendedLevel
	22, // 5: DmPlayerConfigReq.blocktop:type_name -> PlayerDanmakuBlocktop
	20, // 6: DmPlayerConfigReq.blockscroll:type_name -> PlayerDanmakuBlockscroll
	17, // 7: DmPlayerConfigReq.blockbottom:type_name -> PlayerDanmakuBlockbottom
	18, // 8: DmPlayerConfigReq.blockcolorful:type_name -> PlayerDanmakuBlockcolorful
	19, // 9: DmPlayerConfigReq.blockrepeat:type_name -> PlayerDanmakuBlockrepeat
	21, // 10: DmPlayerConfigReq.blockspecial:type_name -> PlayerDanmakuBlockspecial
	25, // 11: DmPlayerConfigReq.opacity:type_name -> PlayerDanmakuOpacity
	26, // 12: DmPlayerConfigReq.scalingfactor:type_name -> PlayerDanmakuScalingfactor
	23, // 13: DmPlayerConfigReq.domain:type_name -> PlayerDanmakuDomain
	27, // 14: DmPlayerConfigReq.speed:type_name -> PlayerDanmakuSpeed
	24, // 15: DmPlayerConfigReq.enableblocklist:type_name -> PlayerDanmakuEnableblocklist
	14, // 16: DmPlayerConfigReq.inlinePlayerDanmakuSwitch:type_name -> InlinePlayerDanmakuSwitch
	7,  // 17: DmSegMobileReply.elems:type_name -> DanmakuElem
	6,  // 18: DmSegMobileReply.aiFlag:type_name -> DanmakuAIFlag
	33, // 19: DmViewReply.mask:type_name -> VideoMask
	34, // 20: DmViewReply.subtitle:type_name -> VideoSubtitle
	9,  // 21: DmViewReply.aiFlag:type_name -> DanmakuFlagConfig
	13, // 22: DmViewReply.playerConfig:type_name -> DanmakuPlayerViewConfig
	8,  // 23: DanmakuAIFlag.dmFlags:type_name -> DanmakuFlag
	10, // 24: DanmakuPlayerViewConfig.danmakukuDefaultPlayerConfig:type_name -> DanmakuDefaultPlayerConfig
	11, // 25: DanmakuPlayerViewConfig.danmakukuPlayerConfig:type_name -> DanmakuPlayerConfig
	12, // 26: DanmakuPlayerViewConfig.danmakukuPlayerDynamicConfig:type_name -> DanmakuPlayerDynamicConfig
	32, // 27: SubtitleItem.author:type_name -> UserInfo
	31, // 28: VideoSubtitle.subtitles:type_name -> SubtitleItem
	0,  // 29: DM.DmPlayerConfig:input_type -> DmPlayerConfigReq
	2,  // 30: DM.DmSegMobile:input_type -> DmSegMobileReq
	4,  // 31: DM.DmView:input_type -> DmViewReq
	1,  // 32: DM.DmPlayerConfig:output_type -> Response
	3,  // 33: DM.DmSegMobile:output_type -> DmSegMobileReply
	5,  // 34: DM.DmView:output_type -> DmViewReply
	32, // [32:35] is the sub-list for method output_type
	29, // [29:32] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_bilibili_danmaku_v1_proto_init() }
func file_bilibili_danmaku_v1_proto_init() {
	if File_bilibili_danmaku_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bilibili_danmaku_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmPlayerConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmSegMobileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmSegMobileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmViewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmViewReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuAIFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuFlagConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuDefaultPlayerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuPlayerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuPlayerDynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmakuPlayerViewConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlinePlayerDanmakuSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuAiRecommendedLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuAiRecommendedSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuBlockbottom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuBlockcolorful); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuBlockrepeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuBlockscroll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuBlockspecial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuBlocktop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuEnableblocklist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuOpacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuScalingfactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuSpeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuSwitchSave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDanmakuUseDefaultConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtitleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_danmaku_v1_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoSubtitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bilibili_danmaku_v1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bilibili_danmaku_v1_proto_goTypes,
		DependencyIndexes: file_bilibili_danmaku_v1_proto_depIdxs,
		MessageInfos:      file_bilibili_danmaku_v1_proto_msgTypes,
	}.Build()
	File_bilibili_danmaku_v1_proto = out.File
	file_bilibili_danmaku_v1_proto_rawDesc = nil
	file_bilibili_danmaku_v1_proto_goTypes = nil
	file_bilibili_danmaku_v1_proto_depIdxs = nil
}
